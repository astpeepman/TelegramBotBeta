from telebot import types
from src.UtilsCode.telegramcalendar import *
from src.Modules.OrderModule import *
from src.UtilsCode.SourceCode import MainProducts
import emoji



class Client():
    def __init__(self, bot, id='', t=datetime.datetime(2021,1,1,0,0)):
        self.ClientId=id
        self.Basket=Basket(self.ClientId).GetBasketFromDB()
        self.Order=Order(B=self.Basket, uid=self.ClientId)
        self.LastActiveTime=t
        self.BOT=bot

    def __del__(self):
        self.Basket.DeleteFromBasket()
        self.Order.OrderClear()

    def StartMessage(self):
        text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ'
        text += '\n–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å:'
        text += '\n/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é'
        text += '\n/products - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö'
        # text+='\n/order - –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
        text += '\n/status - –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
        text += '\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
        text += '\n/basket - –ö–æ—Ä–∑–∏–Ω–∞'
        text += '\n–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å–Ω–∏–∑—É'

        keyboard1 = types.ReplyKeyboardMarkup(True)

        StartKey = types.KeyboardButton(text='–ù–∞—á–∞—Ç—å')
        ProductsKey = types.KeyboardButton(text='–¢–æ–≤–∞—Ä—ã')
        StatusKey = types.KeyboardButton(text='–°—Ç–∞—Ç—É—Å')
        InfoKey = types.KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        BasketKey = types.KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ ' + emoji.emojize('üß∫'))

        keyboard1.add(StartKey, ProductsKey)
        keyboard1.add(StatusKey, InfoKey, BasketKey)

        text += '\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º: @Egor_mh'

        self.BOT.send_message(self.ClientId, text, reply_markup=keyboard1)

    def ShowAllProducts(self):
        keyboard = types.InlineKeyboardMarkup()
        for p in MainProducts:
            KeyBuff=types.InlineKeyboardButton(text=p.Name, callback_data='CLIENT_PRODUCTS_SHOW+'+str(p.ProductId))
            keyboard.add(KeyBuff)
        self.BOT.send_message(self.ClientId, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=keyboard)


    def ShowOneProduct(self, id):
        P=GetProductById(int(id))
        if P:
            text = P.GetProductString()
            keyboard = types.InlineKeyboardMarkup()
            KeyAddToBasket = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                                        callback_data='CLIENT_BASKET_ADDTOBASKET+' + str(P.ProductId))
            KeyMainMenu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='CLIENT_TOMAIN')
            keyboard.add(KeyAddToBasket)
            keyboard.add(KeyMainMenu)
            self.BOT.send_photo(self.ClientId, open(str(P.Photo), 'rb'), caption=text, reply_markup=keyboard)
        else:
            pass

    def ShowBasket(self):
        keyboard = types.InlineKeyboardMarkup()
        if self.Basket.Products==[]:
            text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ '+emoji.emojize('ü§∑')
        else:
            text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ ' +emoji.emojize('üß∫')
            text+=self.Basket.GetStringBasket()

            KeyDeleteBasket = types.InlineKeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É ' + emoji.emojize('üóë'),
                                                         callback_data='CLIENT_BASKET_CLEAN')
            KeyBuy = types.InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ' + emoji.emojize('üí∏'),
                                                callback_data='CLIENT_BASKET_BUY')
            keyboard.add(KeyDeleteBasket, KeyBuy)
            text += '\n\n'+emoji.emojize('‚úÖ')+'–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ' + str(self.Basket.TotalPrice)
        self.BOT.send_message(self.ClientId, text, reply_markup=keyboard)

    def SendInfo(self, inf):
        fileObj = codecs.open(inf.TextFile, "r", "utf_8_sig" )
        text = fileObj.read()
        self.BOT.send_photo(self.ClientId, open(str(inf.ImgFile), 'rb'))
        self.BOT.send_message(self.ClientId, text)



    def AddProdToBasket(self, message, product):
        i = IntTypeCheck(message.text)
        if i == -1 or i == -2:
            self.BOT.send_message(self.ClientId, '–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
            self.ShowOneProduct(int(product.ProductId))
        else:
            self.Basket.AddToBasket(product, i)
            self.ShowBasket()

    def CheckOut(self, message, questNum):
        self.Order.Basket=self.Basket
        if questNum==1:
            self.Order.UserName=message.text

            try:
                self.Order.UserLogin = str(message.from_user.username)
            except:
                self.Order.UserLogin = '–ù–ï–ò–ó–í–ï–°–¢–ï–ù'

            PayKeyboard = types.InlineKeyboardMarkup()
            Pickupkey = types.InlineKeyboardButton(text='–°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='–°LIENT_ORDER_TYPE_PICKUP')
            DeliveryKEY = types.InlineKeyboardButton(text='–î–æ—Å—Ç–∞–≤–∫–∞', callback_data='–°LIENT_ORDER_TYPE_DELIVERY')
            PayKeyboard.add(Pickupkey)
            PayKeyboard.add(DeliveryKEY)
            text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:\n1. –°–∞–º–æ–≤—ã–≤–æ–∑. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º' \
                   '\n2. –î–æ—Å—Ç–∞–≤–∫–∞. 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º\n–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ 1 –∫–ª–∞—Å—Å (+350 —Ä—É–±–ª–µ–π)'
            self.BOT.send_message(message.chat.id, text, reply_markup=PayKeyboard)
        elif questNum==3:
            self.BOT.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=create_calendar())
        elif questNum==4:
            TimeKeyboard = types.InlineKeyboardMarkup()
            for t in TIMES:
                keyBuff=types.InlineKeyboardButton(text=str(t), callback_data='–°LIENT_ORDER_TIME+'+str(t))
                TimeKeyboard.add(keyBuff)

            self.BOT.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è', reply_markup=TimeKeyboard)
        elif questNum==5:
            text=self.Order.GetOrderString()
            COMFIRMKEY = types.InlineKeyboardButton(text='–ü–û–î–¢–í–ï–†–î–ò–¢–¨', callback_data='–°LIENT_ORDER_CONFIRM')
            CANCELKEY = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ò–¢–¨', callback_data='–°LIENT_ORDER_CANCEL')
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(COMFIRMKEY)
            keyboard.add(CANCELKEY)

            self.BOT.send_message(message.chat.id, text, reply_markup=keyboard)



    def GetDeliveryAdress(self, message, step):
        if step==1:
            self.Order.Adress=message.text
            self.BOT.send_message(self.ClientId, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω–¥–µ–∫—Å')
            self.BOT.register_next_step_handler(message, self.GetDeliveryAdress, 2)
        if step==2:
            if CheckNumbersInString(message.text, 6)==1:
                self.Order.Adress+='+'+str(message.text)
                self.BOT.send_message(self.ClientId,
                                      '–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É, –ø—Ä–∏—Å–ª–∞–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫ (—Å–∫—Ä–∏–Ω—à–æ—Ç)'
                                      '\n–í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–Ω–æ–≥–æ —á–µ–∫–∞, –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –¥–Ω–µ–π, –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω')
                self.CheckOut(message, 5)
            else:
                keyboard=types.InlineKeyboardMarkup()
                KeyMainMenu = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='CLIENT_TOMAIN')
                KeyAgain=types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å –µ—â–µ —Ä–∞–∑', callback_data='–°LIENT_ORDER_INDEX_AGAIN')
                keyboard.add(KeyAgain)
                keyboard.add(KeyMainMenu)
                self.BOT.send_message(self.ClientId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å –µ—â–µ —Ä–∞–∑', reply_markup=keyboard)



    def GetPickupDate(self, call):
        selected, date = process_calendar_selection(self.BOT, call)
        if selected:
            self.BOT.send_message(chat_id=call.from_user.id,
                                  text="–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: %s" % (date.strftime("%d/%m/%Y")))
            self.Order.MeetingDate = date
            self.CheckOut(call.message, 4)

    def GetPickupTime(self, call):

        time = call.data.split('+')[1]



        self.Order.MeetingTime = StringToTime(time)
        text = "–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: %s" % (self.Order.MeetingTime.strftime("%H:%M"))
        self.BOT.edit_message_text(text=text,
                                   chat_id=call.message.chat.id,
                                   message_id=call.message.message_id
                                   )
        self.CheckOut(call.message, 5)


    def OrderConfirm(self, call):
        self.Order.CREATINGDateTime=datetime.datetime.now()
        self.Order.NewOrder()
        text = f'–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {self.Order.orderId}\n\n'
        if self.Order.Type == OrderType.T_PICKUP:
            text += '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!\n'
        elif self.Order.Type==OrderType.T_DELIBERY:
            text += f'–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {self.Basket.TotalPrice+350} –†–£–ë–õ–ï–ô –Ω–∞ –ö–ê–†–¢–£ 0000 0000 0000 0000 –∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –¥–Ω–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. ' \
                    f'\n*–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:*' \
                    f'\n*1) –ö–æ–º–∞–Ω–¥–∞ /status (–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç—É—Å" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ).*' \
                    f'\n*2) –ù–∞—Ö–æ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É.*' \
                    f'\n*3) –ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É".*'
        text += '\n\n–ï—Å–ª–∏ —É –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!'

        self.Order.SendOrderToAdmin('–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n')
        self.Basket.DeleteFromBasket()

        self.BOT.edit_message_text(text=call.message.text,
                                   chat_id=call.message.chat.id,
                                   message_id=call.message.message_id
                                   )
        bot.send_message(self.ClientId, text=text, parse_mode="Markdown")
        self.BOT.answer_callback_query(call.id, show_alert=True, text=f"–ó–ê–ö–ê–ó –û–§–û–†–ú–õ–ï–ù. –ù–û–ú–ï–† –í–ê–®–ï–ì–û –ó–ê–ö–ê–ó–ê: {self.Order.orderId}")

        self.Order.OrderClear()


    def FormedOrderCancel(self, call):
        self.Order.orderId=int(call.data.split('+')[1])
        self.Order.GetorderFromDB()
        if self.Order.Status==OrderStatus.S_AWAITINGPAY or self.Order.Status==OrderStatus.S_AWAITINGCONFIRM or self.Order.Status==OrderStatus.S_AWAITMEETING:
            self.Order.Status=OrderStatus.S_CANCELEDFROMUSER
            if self.Order.UpdateOrderSatus():
                text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É'
                self.BOT.answer_callback_query(call.id, show_alert=True,
                                               text=text)
                self.Order.SendOrderToAdmin(beginText='!!!–ö–õ–ò–ï–ù–¢ –û–¢–ú–ï–ù–ò–õ –ó–ê–ö–ê–ó!!!\n')
                self.Order.OrderClear()
            else:
                text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑' \
                     '–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –µ—â–µ —Ä–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å—é–¥–∞: @Skulap1'
            self.BOT.edit_message_text(text=text,
                                       chat_id=call.message.chat.id,
                                       message_id=call.message.message_id
                                       )
        else:
            text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!'
            self.BOT.answer_callback_query(call.id, show_alert=True,
                                           text=text)


    def GetImg(self, message, photoType):
        if message.photo is not None:
            if photoType==ImgTypes.ClientCheck:
                self.Order.Status = OrderStatus.S_AWAITINGCONFIRM
                self.Order.UpdateOrderSatus()

                file_info = self.BOT.get_file(message.photo[len(message.photo) - 1].file_id)
                downloaded_file = self.BOT.download_file(file_info.file_path)
                src = f'src/ClientChecks/Order_{self.Order.orderId}.jpg'
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file)

                text = f'!!!–ü–û –ó–ê–ö–ê–ó–£ ‚Ññ{self.Order.orderId} –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —á–µ–∫–∞!!!\n\n'
                def Yo():
                    for i in Admins:
                        self.BOT.send_photo(i.Id, downloaded_file, caption=f'–ß–µ–∫ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{self.Order.orderId}')

                self.Order.SendOrderToAdmin(beginText=text, fun=Yo())

                self.Order.OrderClear()
                text='–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n' \
                     '–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ  –¥–Ω—è,' \
                     ' –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω –¥–æ 17:30 –ø–æ –º—Å–∫.'
                self.BOT.reply_to(message, text)
            else:
                self.BOT.send_message(self.ClientId, '–ù–µ –ø–æ–Ω–∏–º–∞—é –∫ —á–µ–º—É —ç—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–æ —Å–ø–∞—Å–∏–±–æ)')
        else:
            bot.send_message(self.ClientId, '–û–∂–∏–¥–∞–ª–∞—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–æ –µ–µ –Ω–µ—Ç üôÅ')
            self.StartMessage()




    def Orderfunction(self, call):
        if call.data.startswith('–°LIENT_ORDER_TYPE'):
            self.BOT.edit_message_text(text=call.message.text,
                                       chat_id=call.message.chat.id,
                                       message_id=call.message.message_id
                                       )
            if call.data=='–°LIENT_ORDER_TYPE_PICKUP':
                self.Order.Type=OrderType.T_PICKUP
                self.Order.Adress=MYADRESS
                self.Order.Status=OrderStatus.S_AWAITINGCONFIRM
                self.BOT.answer_callback_query(call.id, show_alert=True, text='–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: –ú–æ—Å–∫–≤–∞, '
                                                                              '—É–ª. –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è 8–∫2 (–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è)')
                self.BOT.send_message(call.message.chat.id, '–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: –ú–æ—Å–∫–≤–∞, '
                                                            '—É–ª. –í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è 8–∫2 (–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è)\n')
                self.CheckOut(call.message, 3)
            elif call.data=='–°LIENT_ORDER_TYPE_DELIVERY':
                self.Order.Type=OrderType.T_DELIBERY
                self.Order.Status=OrderStatus.S_AWAITINGPAY
                self.BOT.send_message(self.ClientId, '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
                self.BOT.register_next_step_handler(call.message, self.GetDeliveryAdress, 1)
        elif call.data.startswith('–°LIENT_ORDER_DATE'):
            self.GetPickupDate(call)
        elif call.data.startswith('–°LIENT_ORDER_TIME'):
            self.GetPickupTime(call)

        elif call.data=='–°LIENT_ORDER_CONFIRM':
            self.OrderConfirm(call)
        elif call.data=='–°LIENT_ORDER_CANCEL':
            self.BOT.answer_callback_query(call.id, show_alert=True,
                                           text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É')
            self.BOT.edit_message_text(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É',
                                       chat_id=call.message.chat.id,
                                       message_id=call.message.message_id
                                       )
            self.Order.OrderClear()
            self.StartMessage()
        elif call.data.startswith('–°LIENT_ORDER_FORMED_CANCEL'):
            self.FormedOrderCancel(call)
        elif call.data.startswith('–°LIENT_ORDER_FORMED_PAY_CONFIRM'):
            self.BOT.edit_message_text(text=call.message.text,
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id)
            self.BOT.send_message(self.ClientId, text='–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞')
            self.Order=Order(oid=int(call.data.split('+')[1]))
            bot.register_next_step_handler(call.message, self.GetImg, ImgTypes.ClientCheck)
        elif call.data=='–°LIENT_ORDER_INDEX_AGAIN':
            self.BOT.edit_message_text(text='–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω–¥–µ–∫—Å',
                                       chat_id=call.message.chat.id,
                                       message_id=call.message.message_id)
            self.BOT.register_next_step_handler(call.message, self.GetDeliveryAdress, 2)



    def BasketFunction(self, call):
        if call.data.startswith('CLIENT_BASKET_ADDTOBASKET'):
            P = GetProductById(int(call.data.split('+')[1]))
            if P.Present==True:
                if len(P.Kinds)==1:
                    P2 = ClientProduct(kindId=int(P.Kinds[0]))
                    self.BOT.send_message(self.ClientId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    self.BOT.register_next_step_handler(call.message, self.AddProdToBasket, P2)
                else:
                    keyboard=types.InlineKeyboardMarkup()
                    i=0
                    for k in P.Kinds:
                        KeyBuff=InlineKeyboardButton(text=GetKindById(k)[0][2]+' - '+str(P.Prices[i])+'‚ÇΩ', callback_data='CLIENT_PRODUCTS_CATEGORY+'+str(k))
                        i+=1
                        keyboard.add(KeyBuff)
                    self.BOT.send_message(self.ClientId, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', reply_markup=keyboard)
            else:
                text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω —Å–Ω–æ–≤–∞ —É –Ω–∞—Å –ø–æ—è–≤–∏—Ç—Å—è, –º—ã –≤–∞–º –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º'
                self.BOT.send_message(self.ClientId, text=text)
        elif call.data=='CLIENT_BASKET_CLEAN':
            self.Basket.DeleteFromBasket()
            self.BOT.edit_message_text(text='–í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É, —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –ø—É—Å—Ç–∞'+emoji.emojize('üôÇ'),
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id
                                    )

        elif call.data=='CLIENT_BASKET_BUY':
            self.BOT.edit_message_text(text=call.message.text,
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id
                                    )
            self.BOT.send_message(self.ClientId, '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é)')
            self.BOT.answer_callback_query(call.id, show_alert=True, text="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é. –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è "
                                                      "–¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ " +emoji.emojize('üèÉ‚Äç‚ôÇÔ∏è')+ " ,–∞ —Ç–∞–∫ –∂–µ –¥–ª—è —Å–∫–∏–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ "+emoji.emojize('üëç'))
            self.BOT.register_next_step_handler(call.message, self.CheckOut, 1)


    def FindOrder(self, message, step):
        if step == 1:
            self.BOT.send_message(self.ClientId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
            self.BOT.register_next_step_handler(message, self.FindOrder, 2)
        elif step==2:
            i = IntTypeCheck(message.text)

            if i == -1 or i == -2:
                self.BOT.send_message(self.ClientId, '–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
                self.StartMessage()
            else:
                o=Order(oid=i)
                text=o.GetOrderString()
                if text:
                    if o.UserId==str(message.from_user.id):
                        keyboard = types.InlineKeyboardMarkup()
                        if o.Status==OrderStatus.S_AWAITINGPAY:
                            confKey = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                                                 callback_data='–°LIENT_ORDER_FORMED_PAY_CONFIRM+' + str(
                                                                    o.orderId))
                            keyboard.add(confKey)
                        if o.Status==OrderStatus.S_AWAITINGPAY or o.Status==OrderStatus.S_AWAITINGCONFIRM or o.Status==OrderStatus.S_AWAITMEETING:
                            cancelKey=types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                                                                     callback_data='–°LIENT_ORDER_FORMED_CANCEL+' + str(
                                                                        o.orderId))
                            keyboard.add(cancelKey)
                        self.BOT.send_message(self.ClientId, text, reply_markup=keyboard)
                    else:
                        self.BOT.send_message(self.ClientId, '–ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ —Å –≤–∞—à–∏–º –ª–æ–≥–∏–Ω–æ–º –≤ –±–∞–∑–µ')
                else:
                    self.BOT.send_message(self.ClientId, '–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


    def ClientMessage(self, message):
        try:
            print(self.ClientId, '–ù–∞–∂–∞–ª –Ω–∞ ', message.text)
            if message.text=='/start' or message.text=='–ù–∞—á–∞—Ç—å':
                self.StartMessage()
            if message.text=='/products' or message.text=='–¢–æ–≤–∞—Ä—ã':
                self.ShowAllProducts()
            if message.text=='/basket' or message.text=='–ö–æ—Ä–∑–∏–Ω–∞ ' + emoji.emojize('üß∫'):
                self.ShowBasket()
            if message.text=='/status' or message.text=='–°—Ç–∞—Ç—É—Å':
                self.FindOrder(message,1)
            if message.text=='/info' or message.text=='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                keyboard=types.InlineKeyboardMarkup()
                for value in INFORMATHIONS.values():
                    KeyBuf=types.InlineKeyboardButton(text=value.Name, callback_data='CLIENT_INFO+'+str(value.Id))
                    keyboard.add(KeyBuf)
                bot.send_message(self.ClientId,text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)
        except Exception as e:
            print('–û—à–∏–±–∫–∞::', e)


    def ClientCall(self, call):
        try:
            print(self.ClientId, '–ù–∞–∂–∞–ª –Ω–∞ ', call.data)
            if call.data.startswith('CLIENT_PRODUCTS_SHOW'):
                self.ShowOneProduct(call.data.split('+')[1])
            elif call.data.startswith('CLIENT_BASKET'):
                self.BasketFunction(call)
            elif call.data.startswith('CLIENT_PRODUCTS_CATEGORY'):
                P2 = ClientProduct(kindId=int(call.data.split('+')[1]))
                text='–í—ã –≤—ã–±—Ä–∞–ª–∏: "'+str(P2.Name)+' ('+str(P2.StringKind)+')"'
                text+='\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞'
                self.BOT.edit_message_text(text=text,
                                           chat_id=call.message.chat.id,
                                           message_id=call.message.message_id
                                           )
                self.BOT.register_next_step_handler(call.message, self.AddProdToBasket, P2)
            elif call.data.startswith('–°LIENT_ORDER'):
                self.Orderfunction(call)
            elif call.data=='CLIENT_TOMAIN':
                self.StartMessage()

            elif call.data.startswith('CLIENT_INFO'):
                self.BOT.edit_message_text(text=call.message.text,
                                           chat_id=call.message.chat.id,
                                           message_id=call.message.message_id
                                           )
                self.SendInfo(INFORMATHIONS[int(call.data.split('+')[1])])
        except Exception as e:
            print('–û—à–∏–±–∫–∞::', e)

