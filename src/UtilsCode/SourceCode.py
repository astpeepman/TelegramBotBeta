import emoji
import datetime
from dateutil import parser
from enum import IntEnum
from src.Modules.ProductModule import *
from src.UtilsCode.SqlCode import *
import telebot
from telebot import types
import codecs
from threading import Thread
import os
from copy import copy, deepcopy

bot = telebot.TeleBot('1591054566:AAGoTiGl3uty6kWMym40u5aB7Aygn95bLRU')

#INFO
INFORMATHIONS={}
def GetInfoFromDB():
    Infos=SelectInTable('Info', '*')
    for i in Infos:
        INFORMATHIONS[i[0]]=Info(i[0],i[3],i[1],i[2])




# –°–ú–ê–ô–õ–ò–ö–ò
EMOJI = [emoji.emojize(':pill:'), emoji.emojize(':mushroom:'), emoji.emojize('üçΩ')]
EMOJINUM=[emoji.emojize('0Ô∏è‚É£'),emoji.emojize('1Ô∏è‚É£'), emoji.emojize('2Ô∏è‚É£'),
          emoji.emojize('3Ô∏è‚É£'), emoji.emojize('4Ô∏è‚É£'), emoji.emojize('5Ô∏è‚É£'),
          emoji.emojize('6Ô∏è‚É£'), emoji.emojize('7Ô∏è‚É£'), emoji.emojize('8Ô∏è‚É£'), emoji.emojize('9Ô∏è‚É£')]

def NumToEmoji(num):
    x=''
    for i in str(num):
        x+=EMOJINUM[int(i)]
    return x

#–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
MYADRESS='–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è 8–∫2'

#–ê–¥–º–∏–Ω–ê–π–¥–∏—Å
EgorId='717616464'
IlvirId='375747622'
TestAdminID='1223783387'

#–í—Ä–µ–º–µ–Ω–∞
TIMES=[]
TIMES.append('12:00')
TIMES.append('15:00')
TIMES.append('18:00')
TIMES.append('21:00')


#–¢–£—Ç –ü–û–ù–Ø–¢–ù–û
Clients=[]
Admins=[]
MainProducts=[]
Statuses=[]

#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
def UpdateProducts():
    MainProducts.clear()
    ProductsBuff=SelectInTable('products')
    for i in ProductsBuff:
        ProductKinds=SelectInTable('kinds', '*', 'productId', int(i[0]))
        P=MainProduct()
        P.SetFromDB(i, ProductKinds)
        MainProducts.append(P)
        del P

#–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –ê–ô–î–ò
def GetProductById(id):
    for i in MainProducts:
        if i.ProductId==int(id):
            return i
    return None

#–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –î–ê–¢–£
def StringToDateTime(separately, StrDate, StrTime, StrDateTime=''):
    if separately==True:
        dateBuffer=StrDate.split('-')
        date=datetime.date(int(dateBuffer[0]), int(dateBuffer[1]), int(dateBuffer[2]))
        timeBuffer=StrTime.split(':')
        time=datetime.time(int(timeBuffer[0]), int(timeBuffer[1]), int(timeBuffer[2]))
        return date, time
    else:
        return parser.parse(StrDateTime)

#–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–∞
def IntTypeCheck(mess):
    try:
        i = int(mess)
        if (i > 0):
            return i
        else:
            return -1
    except:
        return -2


def StringToTime(t):
    if t[0]=='0':
        hour=int(t[1])
    else: hour=int(str(t[0]+t[1]))
    if t[3]=='0':
        min=int(t[4])
    else: min=int(str(t[3]+t[4]))

    return datetime.time(hour, min)


def SendProductPresent(Product):
    text='–í–ù–ò–ú–ê–ù–ò–ï!!!\n' \
         '–í –Ω–∞–ª–∏—á–∏–µ —Å–Ω–æ–≤–∞ –ø–æ—è–≤–∏–ª—Å—è —Ç–æ–≤–∞—Ä '+str(Product.Name)
    text+='\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞)))'

class ImgTypes(IntEnum):
    ClientCheck=0
    AdminAddInfo=1

def CheckNumbersInString(s, count):
    i=0
    for k in str(s):
        try:
            x=int(k)
            i += 1

        except:
            print('cant NumberToStr')
            return -1
    if i != count:
        return -2

    return 1
